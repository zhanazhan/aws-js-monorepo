service: aws-backend

frameworkVersion: "3"

provider:
  name: aws
  runtime: nodejs18.x
  lambdaHashingVersion: '20201221'
  environment:
    NODE_ENV: dev
    PRODUCTS_TABLE: products
    STOCKS_TABLE: stocks
    SQS_QUEUE:
      Ref: 'CatalogItemsQueue'
    CREATE_PRODUCT_TOPIC_ARN:
      Ref: 'CreateProductTopic'
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource: "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.PRODUCTS_TABLE}"
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource: "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.STOCKS_TABLE}"
        - Effect: Allow
          Action:
            - sqs:SendMessage
            - sqs:ReceiveMessage
            - sqs:DeleteMessage
            - sqs:ChangeMessageVisibility
            - sqs:GetQueueUrl
            - sqs:GetQueueAttributes
          Resource:
            - Fn::GetAtt: [ "${provider.environment.SQS_QUEUE}", Arn ]
        - Effect: Allow
          Action:
            - sns:Publish
          Resource:
            - Fn::GetAtt: [ "${provider.environment.CREATE_PRODUCT_TOPIC_ARN}", Arn ]


plugins:
  - serverless-plugin-typescript 
  - serverless-offline

package:
  exclude:
    - config/.env.stg
    - config/.env.pro
  include:
    - config/.env.dev

functions:
  create:
    handler: app/handler.create
    events:
      - http:
          path: products
          method: put
          cors:
            origin: 'https://node-in-aws-web-bucket.s3.eu-west-1.amazonaws.com'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
            allowCredentials: true
  update:
    handler: app/handler.update
    events:
      - http:
          path: products/{id}
          method: post
          cors:
            origin: 'https://node-in-aws-web-bucket.s3.eu-west-1.amazonaws.com'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
            allowCredentials: true
  find:
    handler: app/handler.find
    events:
      - http:
          path: products
          method: get
          cors:
            origin: 'https://node-in-aws-web-bucket.s3.eu-west-1.amazonaws.com'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
            allowCredentials: true
  findOne:
    handler: app/handler.findOne
    events:
      - http:
          path: products/{id}
          method: get
          cors:
            origin: 'https://node-in-aws-web-bucket.s3.eu-west-1.amazonaws.com'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
            allowCredentials: true

  deleteOne:
    handler: app/handler.deleteOne
    events:
      - http:
          path: products/{id}
          method: delete
          cors:
            origin: 'https://node-in-aws-web-bucket.s3.eu-west-1.amazonaws.com'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
            allowCredentials: true

  catalogBatchProcess:
    handler: app/handler.catalogBatchProcess
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - receiverQueue
              - Arn
          batchSize: 5

resources:
  Resources:
    products:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.PRODUCTS_TABLE}
    stocks:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: product_id
            AttributeType: S
        KeySchema:
          - AttributeName: product_id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: StockIdIndex
            KeySchema:
                - AttributeName: id
                  KeyType: HASH
            Projection:
              ProjectionType: 'ALL'
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.STOCKS_TABLE}
    CatalogItemsQueue:
      Type: 'AWS::SQS::Queue'
      Properties:
        BatchSize: 5
        QueueName: "${provider.environment.SQS_QUEUE}"
    CreateProductTopic:
      Type: AWS::SNS::Topic
      Properties:
        DisplayName: Create Product Notification
        SnsTopicName: createProductTopic
    EmailSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        TopicArn: {"Ref": "CreateProductTopic"}
        Protocol: email
        Endpoint: zhanazhan@gmail.com

